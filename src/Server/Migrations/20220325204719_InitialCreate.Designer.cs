// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace vortaro.Server.Migrations
{
    [DbContext(typeof(VortaroContext))]
    [Migration("20220325204719_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("Enhavo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FontoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Teksto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VortoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FontoId");

                    b.ToTable("Enhavoj");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Enhavo");
                });

            modelBuilder.Entity("Fonto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Favoreco")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KreintoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ligilo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Titolo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ĈuUzantkreita")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KreintoId");

                    b.ToTable("Fontoj");
                });

            modelBuilder.Entity("Lingvo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nomo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lingvoj");
                });

            modelBuilder.Entity("Radiko", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DerivaĵaVortoId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ordo")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RadikaVortoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DerivaĵaVortoId");

                    b.HasIndex("RadikaVortoId");

                    b.ToTable("Radiko");
                });

            modelBuilder.Entity("Uzanto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bildo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nomo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Uzantoj");
                });

            modelBuilder.Entity("Voĉdono", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EnhavoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FontoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UzantoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ĈuSupraPoento")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnhavoId");

                    b.HasIndex("FontoId");

                    b.HasIndex("UzantoId");

                    b.ToTable("Voĉdonoj");
                });

            modelBuilder.Entity("Vorto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FinaĵoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Teksto")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FinaĵoId");

                    b.ToTable("Vortoj");
                });

            modelBuilder.Entity("Difino", b =>
                {
                    b.HasBaseType("Enhavo");

                    b.HasIndex("VortoId");

                    b.HasDiscriminator().HasValue("Difino");
                });

            modelBuilder.Entity("Ekzemplo", b =>
                {
                    b.HasBaseType("Enhavo");

                    b.HasIndex("VortoId");

                    b.HasDiscriminator().HasValue("Ekzemplo");
                });

            modelBuilder.Entity("Traduko", b =>
                {
                    b.HasBaseType("Enhavo");

                    b.Property<string>("LingvoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("LingvoId");

                    b.HasIndex("VortoId");

                    b.HasDiscriminator().HasValue("Traduko");
                });

            modelBuilder.Entity("Enhavo", b =>
                {
                    b.HasOne("Fonto", "Fonto")
                        .WithMany()
                        .HasForeignKey("FontoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fonto");
                });

            modelBuilder.Entity("Fonto", b =>
                {
                    b.HasOne("Uzanto", "Kreinto")
                        .WithMany()
                        .HasForeignKey("KreintoId");

                    b.Navigation("Kreinto");
                });

            modelBuilder.Entity("Radiko", b =>
                {
                    b.HasOne("Vorto", "DerivaĵaVorto")
                        .WithMany("Radikoj")
                        .HasForeignKey("DerivaĵaVortoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vorto", "RadikaVorto")
                        .WithMany("Derivaĵoj")
                        .HasForeignKey("RadikaVortoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DerivaĵaVorto");

                    b.Navigation("RadikaVorto");
                });

            modelBuilder.Entity("Voĉdono", b =>
                {
                    b.HasOne("Enhavo", "Enhavo")
                        .WithMany()
                        .HasForeignKey("EnhavoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fonto", null)
                        .WithMany("Voĉdonoj")
                        .HasForeignKey("FontoId");

                    b.HasOne("Uzanto", "Uzanto")
                        .WithMany()
                        .HasForeignKey("UzantoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enhavo");

                    b.Navigation("Uzanto");
                });

            modelBuilder.Entity("Vorto", b =>
                {
                    b.HasOne("Vorto", "Finaĵo")
                        .WithMany()
                        .HasForeignKey("FinaĵoId");

                    b.Navigation("Finaĵo");
                });

            modelBuilder.Entity("Difino", b =>
                {
                    b.HasOne("Vorto", "Vorto")
                        .WithMany("Difinoj")
                        .HasForeignKey("VortoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vorto");
                });

            modelBuilder.Entity("Ekzemplo", b =>
                {
                    b.HasOne("Vorto", "Vorto")
                        .WithMany("Ekzemploj")
                        .HasForeignKey("VortoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vorto");
                });

            modelBuilder.Entity("Traduko", b =>
                {
                    b.HasOne("Lingvo", "Lingvo")
                        .WithMany()
                        .HasForeignKey("LingvoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vorto", "Vorto")
                        .WithMany("Tradukoj")
                        .HasForeignKey("VortoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lingvo");

                    b.Navigation("Vorto");
                });

            modelBuilder.Entity("Fonto", b =>
                {
                    b.Navigation("Voĉdonoj");
                });

            modelBuilder.Entity("Vorto", b =>
                {
                    b.Navigation("Derivaĵoj");

                    b.Navigation("Difinoj");

                    b.Navigation("Ekzemploj");

                    b.Navigation("Radikoj");

                    b.Navigation("Tradukoj");
                });
#pragma warning restore 612, 618
        }
    }
}
